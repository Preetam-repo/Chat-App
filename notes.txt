# created folder CHAT-APP-SOCKET
    mkdir CHAT-APP-SOCKET

# go to the directory 
    cd  .\CHAT-APP-SOCKET\

# make package.json file
    npm init -y

# set scripts and engines keys in package.json like below  (for checking your node version hit command -> node -v)
"scripts": {
    "dev": "nodemon server/server.js",
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node server/server.js"
  },
  "engines": {"node" : "14.5.0"},  
  
# create public/index.html file
    make front end

# create server/server.js and do this
const path = require('path');
const express = require('express');
const app = express();

const publicPath = path.join(__dirname , "/../public");

app.use(express.static(publicPath));



const PORT = process.env.PORT || 3000;
app.listen(PORT , () => console.log(`Connected To Server On PORT ${PORT}`));    

# now run this by typing in powershell
  npm run dev

# make .gitignore file in root of your project and type the files or folder u don't want to include 
  node_modules/

# to see which files are being tracked or not tracked hit
  cmd -> git status //now we can see here there is no node_modules folder except shows something like below
       
        .gitignore
        package-lock.json
        package.json
        server/

# now we are good to add files to stack for commiting
  cmd -> git add file_name 
         //or   
  cmd -> git add .     (adding all files for commiting) 

# now commit the changes/files
  cmd -> git commit -m "Your Message For the Change"

# now as your all files and folder are commited we can simply push it to our gitHub Repo
  step 1) go to browser signin to your github account 
  step 2) make a new repository 
  step 3) name the repository and set it to public 
  step 4) go to code tab of this repository 
  step 5) copy the code underneath "push an existing repoository from command line" and 
          paste it to your terminal and hit enter   

//----------------------------------------------------------------------------------------------------//
# Yusssssss we are done with version controling now lets push this to Heroku from our online repository
//----------------------------------------------------------------------------------------------------//

# Heroku 
   step 1) Make A Free Account On Heroku
   step 2) install heroku on your system
   step 3) give path "C:\Program Files\heroku\bin" for setting environment variable
   step 4) checking if it is perfectly setup or not
           cmd -> heroku version 
           output => heroku/7.47.7 win32-x64 node-v12.16.2  
   step 5) login to your heroku account by
           cmd -> heroku login 
           and follow the steps.
   step 6) after u logged in to heroku in CLI  , Create Heroku App
                cmd -> heroku create               
           this will create our app and give us a link like below
                Creating app... done, â¬¢ whispering-dusk-97270
                https://whispering-dusk-97270.herokuapp.com/ | https://git.heroku.com/whispering-dusk-97270.git
   step 7) now inorder to push our app from git to heroku write the code below.
           cmd -> git push heroku main        
   step 8) To open above link
           cmd -> heroku open 
//------------------------------------------------------------------------------------//
                                Socket.io
//------------------------------------------------------------------------------------//

# install socket.io
   npm i socket.io

# requiring socket.io in our project
   const io = require('socket.io');     

client.js => making the request(the connection)
server.js => accepting the request(grabbing those connection and alowing them)

# Creating Custom Events 
  
   .on => we are actualy listening to the Events
   .emit => for calling an event
            {we can emit any custom event anywhere but as we don't have a button so we are emiting event just after client connected to the server} 
# io -> is used for everyOne 
# socket -> is used for only single User/Client

example : 1) Emiting To Only One User
             -> socket.emit
          2) Broadcasting To Everyone Except Message
             -> socket.braodcast.emit
          3) Broadcasting To everyOne
             -> io.emit

                
# Writing Message Function  server/utils/in message.js
# Always Try To Test Your Function with "mocha" module           
//and utilizing it in our server.js file 
//but before that always try to test your function before adding into the
//main code By Following Below Steps.
step 1) install expect and mocha in devDependencies
step 2) in package.json create these two scripts for testing inside scripts
        "test": "mocha server/**/*.test.js",
        "testWatch": "nodemon --exec \"npm test\""
step 3) create test file with extension .test.js (e.g. msg.test.js)
step 4) in flie_name.test.js 
         require('expect')
         
        // and write your testing code

step 5) run test code by running test script:
        cmd -> npm run test
#// if it get success it shows => 1 passing (17ms)
#// else it shows => Error

if The Above Test Succeded use that function wherever required

//---------------------------------Mustachejs and Moment---------------------//

Mustachejs => A Templating Engine.
Moment => Time Formating Library.

//-------------------------Auto Scrolling and chat room form-----------------//
